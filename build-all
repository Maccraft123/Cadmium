#!/bin/bash
CADMIUMROOT="$(dirname $(realpath $0))"

unset CC
unset CXX

set -e

if [ -z "$DROPTO" ]; then
	if [ "$UID" != "0" ]; then
		mkdir -p "$CADMIUMROOT/tmp"
		exec sudo env DROPTO="$(whoami)" "$CADMIUMROOT/build-all" $@
	else
		echo "Running this script as root without setting DROPTO to your usual user is deprecated"
		echo "The ability to do so will be removed in future"
	fi
fi

"$CADMIUMROOT/check"

function drop_perms() {
	setpriv --reuid="$DROPTO" --regid="$DROPTO" --init-groups --inh-caps=-all $@
}

source "$CADMIUMROOT/config"
source "$CADMIUMROOT/flavor/$FLAV"

[ "$DEBUG" = "true" ] && set -x

if [ -z "$1" ]; then
	echo "Usage:"
	echo "To build Cadmium onto a block device: build-all <device>"
	echo "To build Cadmium onto a file: build-all <file> <size>"
	exit 1
fi

if [ -z "$2" -a ! -b "$1" ]; then
	echo "$1 is not a block device"
	exit 1
fi

drop_perms git -C "$CADMIUMROOT" submodule update 2>/dev/null # FIXME: complains about missing files

function undo_losetup() {
	losetup -d "$DEVICE"
}

if [ -n "$2" ]; then # if $2 is set, it means that user wants a file
	echo "Making file $1 with size of $2"
	IMG="$(realpath $1)"
	fallocate "$IMG" -l "$2"
	DEVICE="$(losetup -f)"
	losetup "$DEVICE" "$IMG"

	trap undo_losetup EXIT
else
	DEVICE="$1"
fi

# it deals with env vars, TODO: make it not
source "$CADMIUMROOT/loader/$LOADER/prepare_parts"

drop_perms "$CADMIUMROOT/kernel/build"

# TODO: move to loader/prepare_parts
case "$FILESYSTEM" in
	f2fs)
		mkfs.f2fs -f "$ROOTPART" -O extra_attr,inode_checksum,sb_checksum
	;;
	ext4)
		mkfs.ext4 -F "$ROOTPART"
		tune2fs -o discard "$ROOTPART"
	;;
esac

function umount_root() {
	umount "$CADMIUMROOT/tmp/root"
}

mkdir -p "$CADMIUMROOT/tmp/root"
mount "$ROOTPART" "$CADMIUMROOT/tmp/root"
trap umount_root EXIT

"$CADMIUMROOT/fs/build" "$CADMIUMROOT/tmp/root"

"$CADMIUMROOT/loader/$LOADER/install" "$DEVICE" "$ROOTPART"

# install modules
make -C "$CADMIUMROOT/tmp/linux-$ARCH" INSTALL_MOD_PATH="$CADMIUMROOT/tmp/root" modules_install

sync # just to be sure

echo "Done!"
